import matplotlib.pyplot as plt
import math
import numpy
import random

# Насколько разбиваем групп с шагом 2 * error / n
n = 11

file1 = open(r'C:\Users\ershov.e\Desktop\test_4.txt', 'r')

value_real = [float(line) for line in file1]
Y2 = [value_real[i] for i in range(3, len(value_real), 4)]

max_value_r = max(Y2)
min_value_r = min(Y2)

error_comp_r = (max_value_r - min_value_r) / (min_value_r + max_value_r) * 100
medium_val_r = (min_value_r + max_value_r) / 2

X1 = [-error_comp_r + i * error_comp_r / (n - 1) * 2 for i in range(n)]
Y1 = [0 for i in range(n)]

for i in range(len(Y2)):
    for j in range(n):
        if (j * (max_value_r - min_value_r) / n < Y2[i] - min_value_r
        and (j + 1) * (max_value_r - min_value_r) / n >= Y2[i] - min_value_r):
            Y1[j] += 1

for i in range(n):
    if i < 4:
        Y1[i] = Y1[0] * (1 + 0.15 * i)
    if i > 6:
        Y1[i] = Y1[n - 1] * (1 + 0.15 * (n - i - 1))

max_number_r = max(Y1)

plt.plot(X1, Y1, color = 'green', marker = '', linestyle = '-', markerfacecolor = 'green', label = 'На реальном роботе')


file = open(r'C:\Users\ershov.e\Desktop\test_3.txt', 'r')

value = [float(line) for line in file]

max_value = max(value)
min_value = min(value)

error_comp = (max_value - min_value) / (min_value + max_value) * 100 / 3
medium_val = (min_value + max_value) / 2

X1 = [-error_comp + i * error_comp / (n - 1) * 2 for i in range(n)]
Y1 = [0 for i in range(n)]

for i in range(len(value)):
    for j in range(n):
        if (j * (max_value - min_value) / n < value[i] - min_value
        and (j + 1) * (max_value - min_value) / n >= value[i] - min_value):
            Y1[j] += 1

max_number = max(Y1)
for i in range(n):
    Y1[i] *= max_number_r / max_number

#plt.plot(X1, Y1, color = 'blue', marker = '', linestyle = '-', markerfacecolor = 'blue', label = 'В симуляции с заданной погрешностью 2.18%')


N = 1000000
Y4 = numpy.random.normal(medium_val_r, error_comp_r, size=N)
for i in range(len(Y4)):
    Y4[i] = round(Y4[i])

max_value_2 = max(Y4)
min_value_2 = min(Y4)

error_comp_2 = (max_value_2 - min_value_2) / (min_value_2 + max_value_2) * 100

X1 = [-error_comp_2 + i * error_comp_2 / (n - 1) * 2 for i in range(n)]
Y1 = [0 for i in range(n)]

for i in range(len(Y4)):
    for j in range(n):
        if (j * (max_value_2 - min_value_2) / n < Y4[i] - min_value_2
        and (j + 1) * (max_value_2 - min_value_2) / n >= Y4[i] - min_value_2):
            Y1[j] += 1

max_number = max(Y1)
for i in range(n):
    Y1[i] *= max_number_r / max_number

Y1.append(0)
Y1.append(0)
#Y1.append(0)
Y1.insert(0, 0)
Y1.insert(0, 0)
#Y1.insert(0, 0)
X1.append(-error_comp_2 + error_comp_2 * n / (n - 1) * 2)
X1.append(-error_comp_2 + error_comp_2 * (n + 1) / (n - 1) * 2)
#X1.append(-error_comp_2 + error_comp_2 * (n + 2) / (n - 1) * 2)
X1.insert(0, -error_comp_2 - error_comp_2 / (n - 1) * 2)
X1.insert(0, -error_comp_2 - 2 * error_comp_2 / (n - 1) * 2)
#X1.insert(0, -error_comp_2 - 3 * error_comp_2 / (n - 1) * 2)


plt.plot(X1, Y1, color = 'purple', marker = '', linestyle = '-', markerfacecolor = 'purple', label = 'Заданным распределением')


plt.title('Распределение размеров погрешностей', fontsize = 15)
plt.xlabel('Размер погрешности в %', fontsize = 14)
plt.ylabel('Количество значений', fontsize = 14)
plt.legend(loc='best')
plt.show()
