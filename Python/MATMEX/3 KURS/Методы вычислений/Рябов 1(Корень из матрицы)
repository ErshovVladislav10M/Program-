# Ершов 343 вычи
# вариант 39


import numpy
import math


# Вычисление a_k
def comp_a_k(k):
    return k + 3


# Вычисление b_k
def comp_b_k(k):
    return k / 2


# Выичсление матрицы A
def comp_A(n):
    A = [[0 for i in range(n)] for j in range(n)]
    for i in range(n):
        for j in range(n):
            A[i][j] = comp_a_k(i + 1) ** comp_b_k(j + 1)
    return numpy.array(A)


# Вычисление матрицы B 1 способ
def comp_B_1(A):
    L = numpy.array([[0.0 for i in range(len(A))] for j in range(len(A))])
    eigenvalue, V = numpy.linalg.eig(A)
    for i in range(len(A)):
        L[i][i] = math.sqrt(eigenvalue[i])
    V1 = numpy.linalg.matrix_power(V, -1)
    B = V.dot(L).dot(V1)
    return B


# Вычисление матрицы B 2 способ
def comp_B_2(A):
    B_k = numpy.array([[A[j][i] for i in range(len(A))] for j in range(len(A))])
    min = 1000
    B = numpy.array([[0.0 for i in range(len(A))] for j in range(len(A))])
    k = 0
    B_k = 0.5 * (B_k + numpy.linalg.matrix_power(B_k, -1).dot(A))
    while k < 100 and norm(numpy.linalg.matrix_power(B_k, 2) - A) > 0.0000001:
        if(norm(numpy.linalg.matrix_power(B_k, 2) - A) < min):
            B = numpy.array(B_k)
            min = norm(numpy.linalg.matrix_power(B_k, 2) - A)
        if(abs(numpy.linalg.det(B_k)) > 0.0000001):
            B_k = 0.5 * (B_k - numpy.linalg.matrix_power(B_k, -1).dot(A))
        k += 1
    return B


# Вычисление матричной нормы при p = бесконечность
def norm(A):
    max = 0
    for i in range(len(A)):
        sum = 0
        for j in range(len(A)):
            sum += abs(A[j][i])
        if(sum > max):
            max = sum
    return max


# Вычисление cond()
def cond(A):
    if(abs(numpy.linalg.det(A)) < 0.0000001): return 0
    return norm(A) * norm(numpy.linalg.matrix_power(A, -1))


# A = numpy.array([[4, 4], [1, 2]])
# print(A)
# B = comp_B_2(A)
# print(numpy.linalg.matrix_power(B, 2))

print('1 способ')
for i in range(2, 11):
    A = comp_A(i)
    B = comp_B_1(A)
    print('\nn = ' + str(i) + ' cond(A) = ' + str(cond(A)) + ' cond(B) = ' + str(cond(B)))
    print('||B^2 - A|| = ' + str(norm(numpy.linalg.matrix_power(B, 2) - A)))

# print('\n2 способ')
# for i in range(2, 11):
    # A = comp_A(i)
    # B = comp_B_2(A)
    # print('\nn = ' + str(i) + ' cond(A) = ' + str(cond(A)) + ' cond(B) = ' + str(cond(B)))
    # print('||B^2 - A|| = ' + str(norm(numpy.linalg.matrix_power(B, 2) - A)))
