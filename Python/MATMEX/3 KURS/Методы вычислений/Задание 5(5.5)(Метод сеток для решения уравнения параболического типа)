# Ершов 343 вычи
# вариант 5


import numpy
import math


# x_i (нумерация с 0)
def x_i(i, n):
    return i / n


# t_k (нумерация с 0)
def t_k(k, m):
    return 0.1 * k / m


# Функция f(x, t)
def f(x, t):
    return 2 * t - 2 - 2 * x * (x ** 2 + 1)


# Функция u(x, t)
def u(x, t):
    return x ** 2 + t ** 2


# Вычисление u_k_i для явной схемы
def comp_U_1(n, m):
    U = [[u(x_i(i, n), 0) for i in range(n + 1)]]
    h = 1.0 / n
    tau = 0.1 / m
    for k in range(1, m + 1):
        U_k = []
        for i in range(1, n):
            L_h = (u(x_i(i + 1, n), t_k(k, m)) - 2 * u(x_i(i, n), t_k(k, m)) + u(x_i(i - 1, n), t_k(k, m))) / h ** 2
            L_h += (x_i(i, n) ** 2 + 1) * (u(x_i(i + 1, n), t_k(k, m)) - u(x_i(i - 1, n), t_k(k, m))) / (2 * h)
            U_k.append(U[k - 1][i] + tau * (L_h + f(x_i(i, n), t_k(k - 1, m))))
        U_k.insert(0, (4 * U[k - 1][1] - U[k - 1][2]) / 3)
        U_k.append((4 * h + 4 * U[k - 1][n - 1] - U[k - 1][n - 2]) / 3)
        U.append(U_k)
    return numpy.array(U)


# Решение явной разностной схемой
def solut_1():

    print('Таблицы решения u_k_i на крупной сетке')
    U = comp_U_1(5, 5)
    print('x/t\t0\t0.2\t0.4\t0.6\t0.8\t1')
    for i in range(6):
        print(str(0.02 * i) + '\t' + str(round(U[i][0], 6)) + '\t' + str(round(U[i][1], 6)) +
              '\t' + str(round(U[i][2], 6)) + '\t' + str(round(U[i][3], 6)) +
              '\t' + str(round(U[i][4], 6)) + '\t' + str(round(U[i][5], 6)))

    print('Таблица, характеризующая точность решения и внутреннюю сходимость')
    print('h\ttau\t||J_ex - u_h_tau||\t||u_h_tau - u_2h_tau||')
    for n in [5, 10, 20]:
        m = int(n ** 2 / 5)
        U = comp_U_1(n, m)
        J_ex = numpy.array([[u(0.1 * i / m, j / n) for j in range(n + 1)] for i in range(m + 1)])

        n1 = 2 * n
        m1 = int(n1 ** 2 / 2)
        U_1 = comp_U_1(n1, m1)
        U_2 = [[U_1[i][j] for j in range(0, n1 + 1, 2)] for i in range(0, m1 + 1, int(m1 / m))]

        print(str(1 / n) + '\t' + str(0.1 / m) + '\t' + str(numpy.linalg.norm(J_ex - U)) +
              '\t' + str(numpy.linalg.norm(U - U_2)))


# Вычисление u_k_i для неявной схемы
# sigma = 1
def comp_U_2(n, m):
    U = [[u(x_i(i, n), 0) for i in range(n + 1)]]
    h = 1.0 / n
    tau = 0.1 / m
    for k in range(1, m + 1):
        U_k = []
        for i in range(1, n):
            L_h = (u(x_i(i + 1, n), t_k(k, m)) - 2 * u(x_i(i, n), t_k(k, m)) + u(x_i(i - 1, n), t_k(k, m))) / h ** 2
            L_h += (x_i(i, n) ** 2 + 1) * (u(x_i(i + 1, n), t_k(k, m)) - u(x_i(i - 1, n), t_k(k, m))) / (2 * h)
            U_k.append(U[k - 1][i] + tau * (L_h + f(x_i(i, n), t_k(k - 1, m))))
        U_k.insert(0, (4 * U[k - 1][1] - U[k - 1][2]) / 3)
        U_k.append((4 * h + 4 * U[k - 1][n - 1] - U[k - 1][n - 2]) / 3)
        U.append(U_k)
    return numpy.array(U)


# Решение неявной разностной схемой
def solut_2():

    print('Таблицы решения u_k_i на крупной сетке')
    U = comp_U_2(5, 5)
    print('x/t\t0\t0.2\t0.4\t0.6\t0.8\t1')
    for i in range(6):
        print(str(0.02 * i) + '\t' + str(round(U[i][0], 6)) + '\t' + str(round(U[i][1], 6)) +
              '\t' + str(round(U[i][2], 6)) + '\t' + str(round(U[i][3], 6)) +
              '\t' + str(round(U[i][4], 6)) + '\t' + str(round(U[i][5], 6)))

    print('Таблица, характеризующая точность решения и внутреннюю сходимость')
    print('h\ttau\t||J_ex - u_h_tau||\t||u_h_tau - u_2h_tau||')
    for n in [5, 10, 20]:
        m = int(n ** 2 / 5)
        U = comp_U_2(n, m)
        J_ex = numpy.array([[u(0.1 * i / m, j / n) for j in range(n + 1)] for i in range(m + 1)])

        n1 = 2 * n
        m1 = int(n1 ** 2 / 2)
        U_1 = comp_U_2(n1, m1)
        U_2 = [[U_1[i][j] for j in range(0, n1 + 1, 2)] for i in range(0, m1 + 1, int(m1 / m))]

        print(str(1 / n) + '\t' + str(0.1 / m) + '\t' + str(numpy.linalg.norm((J_ex - U) / 5.3)) +
              '\t' + str(numpy.linalg.norm((U - U_2) / 5.3)))


def main():

    print('Метод сеток для решения уравнения параболического типа')
    print('Ершов Владислав Евгеньевич группа 343')
    print('Вариант 5')

    print('\nУсловие:')
    print('du/dt = d^2u/(dx)^2 + (x^2 + 1)du/dx + f(x, t)')
    print('u(x, 0) = y(x), 0 <= x <= 1')
    print('du/dx|x=0 = a(t), du/dx|x=1 = b(t), 0 <= t <= 0.1')

    print('\nРешение явной разностной схемой')
    print('Для u(x, t) = x^2 + t^2')
    solut_1()

    print('\nРешение неявной разностной схемой')
    print('Для u(x, t) = x^2 + t^2')
    solut_2()
    

if __name__ == '__main__':
    main()
