14.1)Массивы - таблицы с индексацией (!!!индексы начинаются с 1!!!)
m = {};
Заполнение
m = {"one","two","three"};
Можно так
m[1] = "one";  
m[2] = "two";  
m[3] = "three";

Нежелательно
m = {[1] = "one",[3] = "three"};
Лучше так
m = {[1] = "one",[2] = nil,[3] = "three"};

14.1.2)Длина массива
print(#m); --новые версии
или
print(table.getn(m));

m = {[1] = "one",[3] = "three",};  
print(table.getn(m)); --1, так как 2 элемент - nil

14.1.3)Обход массива
i - индекс массива, v - его значение, нужен ipairs()
for i,v in ipairs(m) do  
  print(i.." is "..v);  
end

Если не нужен индекс или значение
for _,v in ipairs(m) do  
  ...  
end

14.1.4)Массив в массиве
m = {{"one","half"},"two","three"};

14.2)Таблицы (ключ - значение)
t = {  
  color = "black",  
  number = 1.2,  
  param = true
};

Для отделения типов даных удобно использовать ;
t = {  
  number1 = 1,  
  number2 = 2;  
  str = "string";  
  t2 = {  
    n = 4;  
    n1 = true  
  };  
  m = {"one","two","three"};  
  jj = false,  
  gg = true;  
  wtf = nil
};

14.2.1)Обращение к элементам
print(t.number1); -- 1  
print(t.str); -- string
print(t.t2.n); -- 4
print(t.m[1]); -- one

14.2.2)Обход таблицы (вместо ipairs - pairs)
for k,v in pairs(...) do  
  ...  
end

14.2.3)Функции в таблицах
tab = {};

function tab:func(a,b)
  print(a+b);
end

tab:func(2,2); -- 4

14.3)Функции для работы с таблицами
table.concat(table [, sep [, i [, j]]]) Задан массив, в котором все элементы — строки или числа, 
    возвращает table[i]..sep..table[i+1] ··· sep..table[j]. Значение по умолчанию 
    для sep — пустая строка, значение по умолчанию для i — 1, а для j — длина таблицы.
    Если i больше j, функция возвращает пустую строку.
table.insert(m,"four");

table.insert(table, [pos,] value) Вставляет элемент value в позицию pos в table, 
    сдвигая вверх остальные элементы. Значение по умолчанию для pos равно n+1, 
    где n — длина таблицы, т. о., вызов table.insert(t,x) добавляет x в конец таблицы t.
    Только для массивов.
    
table.maxn(table) То же, что и table.getn и #.

table.remove(table [, pos]) Удаляет из table элемент в позиции pos, сдвигая вниз остальные элементы, 
    если это необходимо. Возвращает значение удаленного элемента. Значение по умолчанию для pos — n, 
    где n — длина таблицы, т. о., вызов table.remove(t) удаляет последний элементы таблицы t. 
    (Примечание: использование insert-remove со значениями по умолчанию позволяет 
    работать с таблицей как со стандартным LIFO – стеком) Только для массивов.
table.remove(m);  

table.sort(table [, comp]) Сортирует элементы таблицы в заданном порядке внутри таблицы, 
    начиная с table[1] и заканчивая table[n], где n — длина таблицы. 
    Если параметр comp задан, то он должен быть функцией, которая для двух получаемых параметров
    возвращает true, если первый из них меньше второго (т. о., not comp(a[i+1],a[i]) 
    будет верно для любого i давать true после окончания сортировки).
    Если comp не задан, то вместо него будет использован стандартынй оператор Lua «<».
    
next() Возвращает следующей индекс массива после указанного и соответствующее ему значение.
print(next(m)); -- 1 one  
print(next(m, 1)); -- 2 two  

unpack() Возвращает либо все значения массива, либо от одного индекса и до другого.
print(unpack(m)); -- one two three four five  
print(unpack(m, 2, 3)); -- two three

rawget() Возвращает значение указанного индекса массива.
print(rawget(m, 3)); -- three  
print(rawget(m, table.getn(m))); -- five

rawset() Присваивает указанному индексу массива новое указанное значение.
rawset(m, 1, "oneone");  
